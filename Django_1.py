# Фрэймворк - это набор готовых библиотек и готовых модулей, типа панель администратора, набор регистрации пользователей и т.д.
# Django - это готовый фреймворк, с огромным набором библиотек
#
#  - HTTP запрос бывает 2-х видов: Get и Post. В себе они содержат голову (Head) и тело (Body)
#  - Для получения инфы с сервера используется Get запрос
#  - Для обновления инфы на сервере используется Post запрос
#  - Host - Указывет, к какому веб приложению нужно обратится на сервере
#  - User-agent - говорит с какого браузера и устройства обращается клиент
#  - Accept - говорит о том, какой язык может понять клиент
# ========================================================================================================================
#
# Простейшее серверное приложение:
# ## (Запустить сервер из командной строки, находясь в директории с файлом: python simple_http_server.py)
# from http.server import HTTPServer, BaseHTTPRequestHandler
#
# APP_HOST = 'Localhost'  # Указываем на каком хосту будет запускаться наш веб-сервер (в это случае, это хост нашей машины = 127.001)
# APP_PORT = 8000  # Указываем на каком порту сервер будет работать
#
# class SimpleGetHandler(BaseHTTPRequestHandler):  # Класс - элементарный обработчик get запросов
#     def _set_handlers(self):
#         self.send_response(200)  # Указываем, какие заголовки должны быть в нашем запросе
#         self.send_header("Content-type", "text/html; charset=utf-8")
#         self.end_headers()
#
#     def _html(self, message):
#         content = (f"<html>"
#                    f"<body>"
#                    f"<h1>{message}</h1>"  # Здесь передаем наш месадж в html код
#                    f"</body>"
#                    f"/html")
#         return content.encode("utf8")  # Кодируем контент в utf8
#
#     def do_GET(self):
#         self._set_handlers()
#         message = "Привет, мир!"  # Создаем нужный нам месадж
#         self.wfile.write(self._html(message))  # Отправляем наш ответ(ответ сервера) клиенту
#
# def run_server(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):  # Инициализируем запуск сервера
#     server_address = (APP_HOST, APP_PORT)
#     httpd = server_class(server_address, handler_class)
#     httpd.serve_forever()  # Указываем, что сервер необходимо хранить вечно (пока не упадет в ошибку или мы его не выключим)
#
# if __name__ == "__main__":
#     run_server(handler_class=SimpleGetHandler)
# ========================================================================================================================
#
# Компоненты веб приложений и первый запуск DJANGO: Модель MTV
# СУБД (база данных) => Модель => Пердставление => Шаблон
#  - Модель - специальный слой, необходимый для общения с источником данных
#  - Пердставление - Специальная питоновская функция или класс, вызывается при обращении по спец.url и возвращает http ответ
#     Оно преобразует наши http запросы
#  - Шаблон - Это форма представления данных. С помошью нее, можно преобразовывать данные из представления в HTML код и
#     возвращать их клиенту
# ========================================================================================================================
#
# Пишем приложение на DJANGO (все команды можно писать в терминале питона или через CMD перейдя в дирректорию, где будем создавать приложение)
#  - Установка Django: pip install Django==2.2
 - Установка "ToDo": django-admin startproject todo  # Команда создает каркас и все нужные файлы для работы приложения"
#  - Создаем новое приложение: django-admin startapp tasks
#  - Выполняем миграцию наших данных в базу данных: python manage.py migrate
#  - Создаем пользователя для приложения: python manage.py createsuperuser. Django попросит ввести имя пользователя (сделал admin)
#     потом попросит ввести email - можно оставить пустым
#     после попросит пароль (1234), потом попросит ввести более сложный (можно просто пропустить этот ход)
#  - Запускаем сервер: python manage.py runserver
#     Запустится приложение на локальном сервере и порту 8000. Можно пройти и проверить (http://localhost:8000)
#     Важно! Созданый сайт уже с админкой! ЧТо бы ее открыть нужно добавить http://localhost:8000/admin (логин и пароль указывали ранее)
#  - Останоить сервер: CTRL+C
#  - Все обработчики запросов находятся в файле views.py Если мы захолтим поменять наше отображение, код меняем именно там
# ========================================================================================================================
#
#                                         Создание проектов:
# Шаг 1:
# Виртуальное окружение: Нужно для того, что бы можно было установить разные версии фреймворков в один интерпритато питона
# Для примекра, как это работает:
#  - Создаем папку - mkdir project
#  - Переходим в эту папку - cd project
#  - Создаем в ней виртуальное окружение - python -m venv venv  # В конце (venv) указываем как будет называться наше окружение
#  - Активируем окружение - project\my_venv\Scripts\activate.bat
#  - После работы деактивируем окружение - project\my_venv\Scripts\deactivate.bat
# ========================================================================================================================
#
# Шаг 2:
# Создаем приложение advertisement
# Важно! При выкатке на продакшн, все пакеты должны быть подписаны одной версией и лежать в файле requirements.txt
#  - Просто создаем файл requirements.txt в папке проекта (команда из видио "touch" не работает в винде)
#  - Далее в файл записываем все пакеты, которые нам понадобятся (нарпимер Django==2.2, версия пишется через ==)
#  - Установим все необходимое из файла - pip install -r requirements.txt (перед установкой перейти в папку проекта (cd project))
#  - После можно стартовать проект - django-admin startproject board (в конце "board" - это название проекта)
#  - Смотрим структуру папок проекта - tree board (в терминале)
#  - Переходим в папку с проектом (cd board) и выполняем команду python manage.py help
#  - Если ввести название команды после 'help', можно получить справку по команде - python manage.py help startapp
#
# Важно! Веб-приложение и Django - не одно и тоже. В django содержутся пакеты, обеспечивающие клиент-серверное взаимодействие
# в веб-приложении же хранятся формы, файл, шаблоны и т.д. для работы самого веб-приложения
#
#  - Создаем приложение, в котором будет лежать код для доски объявлений - python  manage.py startapp advertisement
#  - Теперь создаем миграцию базы данных (в gjango пердустановлена SQLlite) - python manage.py migrate
# ========================================================================================================================
#
# Шаг 3:
# Теперь конфигурируем проект:
# Что бы не превращать основной файл URLS в корневом проекте 'Board' в мешанинуну УРЛов из разных проектов, нужно инкапсулировать
# все запросы внутри проекта advertisement, и потому просто импортируем файл urls.py (предвароительно создав его) из проекта avertisememnt
#  - Для этого в файл 'urls.py', который лежит в папке board добавим импорт из проекта advertisement:
#     - В строке импорта (from django.urls) дописываем через запятую include
#     - А в переменную urlpatterns (в список) добавим через запятую: path('', include('advertisement.urls'))
#     - После, в папке advertisement создаем файл urls.py
#     - from django.urls import path
#     - from .import views          ## Тут импортируем вьюхи
#      - urlpatterns = [
#         path("", views.advertisement_list, name='advertisement_list')  #Здесь связываем представления advertisement
#       ]                                                                #с корневым каталогом двойными кавычками
#     #Этот запрос соответсвует пустой строке (обращению к 127.001) и будет обработан этим представлением. Именной аргумент
#     # "name" это идентификатор url и должен быть уникальным (и легко запоминающимся)
#
# Теперь открываем файл views в папке advertisement:
#  - Добавим в файл свою функцию:
#     from django.http import HttpResponse
#     def advertisement_list(request, *args, **kwargs):
#         return HttpResponse('<ul>'
#                             '<li>Мастер на час</li>'
#                             '<li>Выведение из запоя</li>'
#                             '<li>Услуги экскаватора-погрузчика</li>'
#                             '</ul>')
#  - Что бы добавить новую страничку с объявлением. Для этого нужно дописать еще один url в urlpatterns, например ‘advertisement/’
#     по аналогии с предыдущим (то есть, если вы хотите добавить отдельную ссылку для адреса http://127.0.0.1:8000/advertisement/
#     вам нужно добавить в urls.py такую строчку path('advertisement/', views.advertisement_detail, name='advertisement_list')
#     и представление (функцию) advertisement_detail во views.py.
#
# Что бы функция в файле views возвращала пердставление (а не шаблон внутри представления), а html код в отдельном шаблоне:
#     def advertisement_list(request, *args, **kwargs):
#         return render(request, 'advertisement/advertisement_list.html', {}) # функция render возвращает объект http response
#  - После изменения функции нужно создать соответствующий шаблон. Они хранятся в директории 'advertisement => templates => advertisement'
#     Просто создаем нужные папки в дирректории и уже внутри создадим файл advertisement_list.html
#  - Далее в файл settings.py в директории board/board добавляем 'advertisement' в список INSTALLED_APPS
#  - Файл settings.py - Это конфигуратор проекта, в нем лежат все переменные ,которые мы будем использовать в проекте
#  - Теперь нужно добавить теги в шаблон, что бы отобразить список объявлений - Это делаем в ранее созданом файле advertisement_list.html.

========================================================================================================================
                                            Работа в убунту
 - Создаем в ней виртуальное окружение - python -m venv venv  # В конце (venv) указываем как будет называться наше окружение
 - Активируем окружение - project\my_venv\Scripts\activate.bat
 - После работы деактивируем окружение - project\my_venv\Scripts\deactivate.bat
 - Если pip не установлен в системе, его нужно установить: sudo apt install -y python3-pip
 - Устанавливаем django (в пайчарме) - pip install django
 - Создаем проект - python -m django startproject mysite (-m означает что мы обращаемся к модулю django)
    В созданом проекте есть файлы:
    asgi.py - нужен для запуска асинхронного сервера джанго
    settings.py - нужен для настройки и управления всем проектом (тут же настраиваются все сторонние приложения)
    urls.py - ссылки, которые обробатывают приложения в django
    wsgi.py - нужен для запуска синхронного сервера
 - Запускаем сервер:
    Переходим в папку с проектом: cd mysite
    Вводим команду для запуска: python manage.py runsrever
========================================================================================================================
                                        Создаем проект (сервер)

Состав проекта:
 - urls.py - В файле хранятся все маршруты
 - settings.py - Там настраивается весь проект. В нем же можно изменить тип базы данных (по умоляанию SQLlight)
 - namage.py - Через него управляется весь проект (через него же мы создавали проект, суперпользователдя и т.д.)
                                        ***********************

 - Создаем в ней виртуальное окружение - python -m venv venv  # В конце (venv) указываем как будет называться наше окружение
 - Активируем окружение - project\my_venv\Scripts\activate
 - Установка django - pip install django
 - После установки замораживаем зависимости (делаем перенапраление) - pip freeze > requirements.txt
 - Стартуем проект - python -m django startproject mysite
 - Кликаем по созданной папке mysite правой клавишей, выбираем mark directory -> as root derictory (для правильного индексирования)
 - Переходим в папку с проектом - cd mysite
 - Запускаем сервер - python manage.py runserver (для остановки сервера используется CTRL + C)
 - Применяем миграции:
    1) Открываем второе окно терминала (тк в первом запущен сервер) и переходим в папку проекта: cd mysite
    2) вводим команду: python manage.py migrate (питон сам предлагает ее после запуска сервера)
 - Работаем с базой данных:
    1) Дважды жмем левый shift, в открыфвшемся окне пишем plugin, открываем 'Plugins', и в поиске маркетплэйса пишем database
    2) В появившемся списке выбираем database navigator, устанавливаем и перезагружаем пайчарм
    3) В браузер БД навигатора кликаем пкм по созданному соединению и отмечаем autocommit иначе в бд не будут заносится изменения
 - Создаем суперюзера - python manage.py createsuperuser (логин: admin, почта пустая, пароль: 1234)
 - Далее в панеле админа можно добавлять/редактировать группы и юсеров, назначать права т.д. Все действия будут сохранены
    в БД проекта



========================================================================================================================

                                    Создаем джанго париложения
В приложениях хранятся отдельные ссылки, сущности и т.д. Делается все в отдельных приложениях для того, что бы эти
сущности и ссылки не конфликтовали друг с другом и можно переносить функциональности приложений внутри проекта (например
в интернет магазине отдельно существуют приложения "корзина", "личный кабинет", "каталог" и т.д

Состав приложения:
 - __init__.py - делает из папки приложения (shopapp) пвайтон пакет
 - admin.py - позволяет описать, какие модели нужно отображать в джанго админке
 - apps.py - Содержит в себе конфигурацию этого приложения
 - models.py - Создан для того, что бы объявлять в нем модели джанго
 - tests.py - Нужен для того, что бы писать в нем тесты нашего проекта
 - views.py - В нем будем создавать функции, которые будут обрабатывать наши вью представления
 - ПАПКА migrations: в ней тоже есть __init__.py (так же делает из нее пайтон пакет), в эту папку будут складываться миграции
                                    ****************************


 - Создаем приложение - python manage.py startapp shopapp
 - Подключаем приожение к проекту - открываем файл apps.py, кликаем по имени класса ShopappConfig пкм и выбираем copy reference
    Открываем settings.py в папке mysite, находим INSTALLED_APPS и туда добаляем новую строчку, которую только что скопировали ("shopapp.apps.ShopappConfig")
 - Создаем новый файл urls.py (Для того что бы маршуртизация проекта и приложения были разделены, и можно было создать новое прсотранство имен)
    В файл добавляем импорт: from django.urls import path
    Так же создаем в нем пространстов имен. Создаем переменню: app_name = "shopapp" (имя лучше выбрать аналогиное приложению, что бы потом не путаться)
    Создаем список паттернов для обработки запросов:  urlpatterns = []
 - Подключаем новый urls.py к проекту - Октрываем urls.py в паке mysite, и добавляем в строку импорта include (from django.urls import path, include)
    А в urlpatterns добавляем:  path('shop/', include('shopapp.urls')) # Где 'shop/' - правила роутинга, 'shopapp.urls' - имя импорта маршрутов из нашего приложения
 - Создаем вью функциюю для обработки запроса к нашему приложению - открываем файл views.py в папке shopapp
    В нем добавляем импорт from django.http import HttpResponse,HttpRequest # HttpRequest - нужен для аннотации ответа
    Пишем функцию def shop_index(request:HttpRequest ): return HttpResponse("Пример текстового ответа")
 - Добавляем созданную функцию обработки в наш urls.py , который лежит в папке приложения (mysite)
    Добавляем в файл импорт: from .views import shop_index               # shop_index - это имя функции обработки, которю только что создали
    В urlpatterns добавляем: path("", shop_index, name="index")
        "" - означает запрос к корневой странице приложения
        shop_index - функция, отвтетственная за обработку этого запроса
        name="index" - имя, через которое можно обращаться по указанному пути к функции обработки (это нужнор, так как имя функции может меняться)
========================================================================================================================

                                    Шаблоны в джанго
Документация - https://docs.djangoproject.com/en/4.0/ref/templates/builtins/
